CODEFRAMES

orders.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from datetime import datetime
from PigeonBox.bcolors import bcolors

class Order():
    """ Class represents orders made, works like a database one-to-one relationship with a buyer and a car"""

    def __init__(self, id, car=None, buyer=None, dateBought=None, employee=None) -> None:
        """
        Initializes an object of the Sale class with specified attributes including car, buyer, sales employee, and date of sale.
        """
        pass

    def getUser(self):
        """Returns the ID of the user who bought the car."""
        pass
    
    def getCar(self):
        """Returns the car associated with the order object."""
        pass
    
    def getSeller(self):
        """Returns the employee who sold the car in the order."""
        pass
    
    def getDate(self):
        """Returns the date when the car was bought."""
        pass
    
    def getId(self):
        """Returns the ID of a car order."""
        pass
    
    def getDateJoined(self):
        """Returns the date the user joined in the format "YYYY-MM-DD"."""
        pass
    
    def to_dict(self):
        """Convert the Order object to a dictionary format."""
        pass
    
    def serialize(order):
        """Serializes an Order object to a JSON-compatible format."""
        pass

    def RemoveOrder(self):
        """Removes an order and sets the car status to available."""
        pass
    
    def orderDetails(self):
        """Generates a string containing the details of the order."""
        pass
    
    def __str__(self):
        """Returns a string representation of the order object."""
        pass
    
    def __eq__(self, value) -> bool:
        """Check equality of two Order objects."""
        pass
    
    def __repr__(self) -> str:
        """Returns the string representation of the car object."""
        pass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

users.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from datetime import datetime

class User():
    """A class that represents a user with basic information like username, password, and date joined."""

    def __init__(self, username='', password='', first_name='', last_name='', date_joined=None) -> None:
        """Initializes a User object with a username, password, first name, last name, and date joined."""
        self.username = username
        self.password = password
        self.first_name = first_name
        self.last_name = last_name
        # validate date. if date is not given, set it to today's date.
        if not date_joined: 
            date_joined = datetime.today()
        else:
            date_joined = datetime.strptime(date_joined, "%Y-%m-%d")
        self.date_joined = date_joined

    def getFirstName(self):
        """Returns the first name of the user."""
        pass

    def getLastName(self):
        """Returns the last name of a user."""
        pass

    def UpdatePassword(self, newpassword):
        """Updates the password of the user."""
        pass

    def UpdateUserName(self, newusername):
        """Updates the username attribute of a user object with a new username."""
        pass

    def getUsername(self):
        """Returns the username of a user."""
        pass

    def getPassword(self):
        """Returns the password of a User instance."""
        pass

    def serialize(user):
        """A function to serialize a User object to a JSON-serializable format."""
        pass
    
    def __eq__(self, __o):
        """Determines whether two users are equal by comparing their usernames."""
        pass
        
    def __str__(self):
        """Returns a string representation of a User object."""
        pass

    def __repr__(self) -> str:
        """Return a string representation of a User object."""
        pass



class Admin(User):
    """class inherits from the User class and defines an Admin user type.An Admin user can delete or add inventory, add or delete employees."""

    def __init__(self, username='', password='', first_name='', last_name='', date_joined=None, categoryType="Admin") -> None:
        """Initializes an instance of the Admin class, inheriting from the User class and setting the category type to "Admin"."""
        super().__init__(username, password, first_name, last_name, date_joined)
        self.categoryType = categoryType

    def getCategory(self):
        """Returns the category type of an object."""
        pass

    def __str__(self):
        """Returns a string representation of an Admin instance."""
        pass
    
    def getDetails(self):
        """Get user details."""
        pass
    
    def to_dict(self):
        """Returns a dictionary with user information."""
        pass

class Employee(User):
    def __init__(self, username='', password='', first_name='', last_name='', date_joined=None, categoryType="Employee") -> None:
        """Initializes an Employee object with a specified username, password, first and last name, date joined, and category type."""
        super().__init__(username, password, first_name, last_name, date_joined)
        self.categoryType = categoryType

    def __str__(self):
        """Returns a string representation of the Employee object including category, first name, and last name."""
        pass
    
    def getDetails(self):
        """Returns the details of the employee's joining date in a formatted string."""
        pass

    def getCategory(self):
        """Returns the category type of the user."""
        pass
    
    def to_dict(self):
        """Returns a dictionary representation of the user object."""
        pass


class Customer:
    def __init__(self, first, last, card, email, address) -> None:
        """Constructor for a Customer class with attributes such as first and last name, card, email, address and an empty list for orders."""
        self.firstName = first
        self.lastName = last
        self.card = card
        self.email = email
        self.address = address
        self.orders = []

    def getFirstName(self):
        """Returns the first name of a customer."""
        pass
    
    def getLastName(self):
        """Get the last name of a customer."""
        pass

    def getEmail(self):
        """Returns the email of a customer."""
        pass

    def setCard(self, new_card):
        """Sets the value of the card attribute for the instance of the class."""
        pass

    def setAddress(self, new_address):
        """Method to set a new address for a user profile."""
        pass

    def setEmail(self, new_email):
        """Setter function to update the email address of a user."""
        pass

    def getDetails(self):
        """Returns a string containing the user's email, address, and list of orders."""
        pass

    def to_dict(self):
        """Returns the dictionary representation of the customer object."""
        pass

    def serialize(customer):
        """Function that serializes a Customer object into a JSON serializable dictionary."""
        pass
    
    def __str__(self) -> str:
        """This method returns a string representation of the object instance."""
        pass

    def __repr__(self) -> str:
        """Returns a string representation of the customer object."""
        pass

    def __eq__(self, value) -> bool:
        """Check if two Customer objects are equal by comparing their email addresses."""
        pass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

vehicles.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import locale
import PigeonBox.status as st
from PigeonBox.bcolors import bcolors


class Car():
    """Class that represents a car with various attributes and methods."""

    def __init__(self, vin='', info={}, performance={}, design={}, handling=[], comfort=[], entertainment=[], protection={}, package='', status=None, price=0):
        """ A class constructor that initializes an object with various attributes such as vehicle information, performance, design, handling, comfort, entertainment, protection, package, status, and price."""
        self.vin = vin
        self.info = info
        self.performance = performance
        self.design = design
        self.handling = handling
        self.comfort = comfort
        self.entertainment = entertainment
        self.protection = protection
        self.package = package
        # Set default status to AVAILABLE if not provided
        if status is None:
            status = st.Status.AVAILABLE
        # Convert status string to Status enum if a string is provided
        if isinstance(status, str):
            status = st.strToStatus(status)
        self.status = status
        self.price = price

    def UpdateMileage(self, newMileage):
        """Update the mileage of a vehicle object."""
        pass

    def UpdateWarranty(self, newWarranty):
        """Update the warranty information of a car object."""
        pass

    def getVin(self):
        """Returns the vehicle identification number (VIN) of a vehicle object."""
        pass
    
    def getStatus(self):
        """Returns the current status of a vehicle object."""
        pass
    
    def getStatusStr(self):
        """A method to get the string representation of the car's status"""
        pass
    
    def getCarInfo(self):
        """A method to get the string representation of the car's status."""
        pass

    def SetStatus(self, updated_status):
        """Sets the status of a car object either by passing in a Status enum or a string representation of a status."""
        pass

    def to_dict(self):
        """"Convert object data to a dictionary format."""
        pass

    def serialize(car):
        """JSON serialization of Car object"""
        pass

    def isAvailable(self):
        """Checks if the car is available."""
        pass
    
    def UpdatePrice(self, newprice):
        """"Update the price of a Car object."""
        pass

    def getDetails(self):
        """Returns the details of a car object in a formatted string."""
        pass
    
    def __eq__(self, __o: object) -> bool:
        """Compares two instances of the Car class for equality based on their VINs."""
        pass
    
    def __str__(self) -> str:
        """Returns a string representation of a car object including its year, make, model, price, and status."""
        pass

    def __repr__(self) -> str:
        """Returns a string representation of the car object including its model and make."""
        pass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

session.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from parsers import readJson, writeJson


class Session:
    """handles the session management and authentication of users."""

    def __init__(self) -> None:
        """ Initializes an object of the class with two private attributes containing employee and admin data from a JSON file."""
        self.__employees__, self.__admins__ = readJson.LoadUsers()

    def ReturnEmployees(self):
        """Return the list of employees."""
        pass

    def ReturnAdmins(self):
        """Returns a list of administrator users."""
        pass


class Auth(Session):
    """Extends the Session class to add authentication functionality."""

    def __init__(self) -> None:
        """Initializes an object of a class and creates a combined list of employees and admins as a list of users."""
        super().__init__()
        # Combines the lists of employees and admins into a single list of users
        self.__users__ = self.__employees__ + self.__admins__

    def Authenticate(self, username, password):
        """Authenticate a user with their username and password."""
        pass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bcolors.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class bcolors:
    """Define a class containing various colors to format output text"""

    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def PrintFormat(color_status: str, print_info: str) -> None:
    """
    Print formatted text with color and style options

    :param color_status: A string representing the color option
    :param print_info: A string to be printed
    :return: None
    """
    # Define a dictionary with color options
    color_options = {"Invalid": bcolors.FAIL,
                     "Success": bcolors.OKGREEN,
                     "Action": bcolors.OKBLUE,
                     "Important": bcolors.BOLD,
                     "Warning": bcolors.WARNING,
                     "Purple": bcolors.HEADER,
                     "Cyan": bcolors.HEADER}

    # Set the color based on the color status parameter
    color_status = color_options[color_status]

    # Print the text with the specified color
    print(f"{color_status}{print_info}{bcolors.ENDC}")


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

writeJson.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from PigeonBox import vehicles, users, orders
from parsers.readJson import INVENTORY_PATH, ORDERS_PATH, CUSTOMER_PATH, USERS_PATH
import json
INDENTATION = 2

def writeJson(data):
    """
    This function writes data to a json filePath, it will determine what kind of data is being loaded and write to 
    the appopriate json filePath with the proper formatting
    """
    pass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

readJson.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from PigeonBox import vehicles, users, orders
import json

INVENTORY_PATH = "data/inventory.json"
USERS_PATH = "data/users.json"
ORDERS_PATH = "data/orders.json"
CUSTOMER_PATH = "data/customers.json"

def LoadInventory():
    """
    Loads the car inventory data from a JSON file and creates a list of Car objects.
    Returns:
        List of vehicles.Car objects
    """
    pass

def LoadUsers():
    """
    Loads user data from a JSON file and creates Employee and Admin objects accordingly.
    Returns:
        Tuple of two lists: employees and admins
    """
    pass

def LoadOrders():
    """
    Loads a list of orders from a JSON file.
    Returns:
        List of orders
    """
    pass

def LoadCustomers():
    """
    Loads and returns a list of Customer objects from a JSON file.
    Returns:
        List of users.Customer objects
    """
    pass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

interface.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from parsers import *
from PigeonBox import session, status, orders, users, vehicles


class InterfaceObjects():
    """A class for managing the interface objects and mapping functions."""

    def __init__(self) -> None:
        """ Initializes an instance of a class with inventory, customers, employees, admins, and users."""
        self.inventory = readJson.LoadInventory()
        self.customers = readJson.LoadCustomers()
        self.employees = session.Session().ReturnEmployees()
        self.admins = session.Session().ReturnAdmins()
        self.__users__ = self.employees + self.admins # helper


    '''mapper functions'''
    def usernameToUser(self, username):
        """Converts a given username to a corresponding user object if it exists in the system."""
        pass
    
    def vinToCar(self, vin):
        """This function returns a Car object based on its Vehicle Identification Number (VIN)."""
        pass
    
    def emailToCustomer(self, emailAddress):
        """Get customer object by email address."""
        pass
    
    def getCustomerList(self):
        """Returns the list of all customers."""
        pass
    
    def getEmployeeList(self):
        """Returns a list of all employees."""
        pass

    def isEmployee(self, user):
        """Checks whether the given user is an employee or not."""
        pass

    def ViewUsers(self):
        """Returns the list of all users in the system."""
        pass
    
    def vinExists(self, vin):
        """Check if a VIN (Vehicle Identification Number) exists in the inventory."""
        pass
    
    def inInventory(self, car):
        """Check if a car is in the inventory."""
        pass
    
    def ViewByStatus(self, statusToViewBy):
        """Returns a list of vehicles filtered by their status."""
        pass
    
    def GetInventory(self):
        """Get the inventory of the car dealership."""
        pass
    
    def searchInventory(self, model, make, year):
        """ Search inventory by car model, make, and year and return car object if found."""
        pass
    
    def ViewAvailableInventory(self):
        """Returns a list of available vehicles in the inventory."""
        pass
    
    def UserExists(self, checkUser):
        """ Checks if a user exists in the list of users..Useful for when we want to add or remove an employee"""
        pass
    
    def UsernameExists(self, username):
        """Checks if a username already exists in the list of users."""
        pass


class Interface(InterfaceObjects):
    """Interface is the class that contains all the methods for managing the system's car, customer, users, and orders."""

    def __init__(self) -> None:
        """Initializes an object of the class and loads orders from a JSON file."""
        super().__init__()
        # loads orders from json
        self.ordersDict = readJson.LoadOrders() # have to pass customers and car functionality to correctly add to buyers list and such
        self.orders = []
        for order in self.ordersDict:
            self.orders.append(orders.Order(id=order['id'], car=self.vinToCar(order['carVin']), buyer=self.emailToCustomer(order['buyer']), employee=self.usernameToUser(order['soldBy']), dateBought=order['dateBought']))
        # 0: inv, 1: order, 2: users, 3: customer
        self.isObjListUpdated = [False] * 4
        # loading customer orders if there's any
        for order in self.orders:
            currentCustomer = order.getUser()
            for customer in self.customers:
                if customer == currentCustomer:
                    customer.orders.append(order)

    def changeCarStatus(self, car, status):
        """Change the status of a car and mark the inventory list as updated."""
        pass

    def changeCarPrice(self, car, newPrice):
        """Update the price of a car and set a flag for the inventory list as updated."""
        pass
    
    def changeCarMileage(self, car, newMileage):
        """ Update mileage of a car object and set isObjListUpdated flag to True."""
        pass

    def changeCustomerEmail(self, customer, newEmail):
        """Update the email of a given customer object."""
        pass

    def changeCustomerCard(self, customer, newCard):
        """Change a customer's credit card information"""
        pass
    
    def changeCustomerAddress(self, customer, newAddress):
        """Updates the address of a customer and sets a flag to indicate that the customer list has been updated."""
        pass

    def changeUserPassword(self, user, newPassword):
        """Changes the password of an admin or employee user."""
        pass
            
    def changeUserUsername(self, user, newUsername):
        """A function to change the username of an admin or an employee in a car dealership system."""
        pass
    
    def viewOrders(self):
        """Returns the list of orders."""
        pass
    
    def getOrderslist(self):
        """Returns the list of orders."""
        pass

    def isCarOrdered(self, car) -> bool:
        """Check if a car has been ordered by a customer."""
        pass
    
    def doesOrderExist(self, checkOrder) -> bool:
        """Checks if a car has been ordered."""
        pass
    
    def MakeOrder(self, customer, vehicle, seller):
        """Creates an order object for a given customer, vehicle, and seller and adds it to the order list."""
        pass
    
    def UndoOrder(self, order):
        """Remove an order from the orders list and update the car status."""
        pass

    def emailExists(self, email):
        """Checks if an email exists in the customer list."""
        pass

    def isCustomer(self, newCustomer):
        """
        Check if a given customer exists in the list of customers.
        """
        pass
    
    def AddCustomer(self, first, last, card, email, address):
        """
        Adds a new customer to the list of customers.
        """
        pass

    def RemoveCustomer(self, customer):
        """
        Removes a given customer and their orders from the system, and sets any ordered car that has not been delivered to backorder status.
        """
        pass
    
    def LogOut(self):
        """
        Saves changes to JSON files and logs the user out of the system.
        """
        pass

class AdminInterface(Interface):
    """ Admin can do everything an employee can do and MORE, hence why it has its own class, which inherits all the methods from Interface
        but an admin can add and remove employees, and add and remove cars from inventory """

    def AddAdmin(self, username, passwd, fname, lname, dateJoined=None):
        """Add a new admin user to the system."""
        pass

    def AddEmployee(self, username, passwd, fname, lname, dateJoined=None) -> None:
        """Adds a new employee user to the system."""
        pass

    def ordersMadeByUser(self, user):
        """Returns a list of orders made by a given user."""
        pass

    def RemoveUser(self, userToRemove) -> bool:
        """Removes a user from the system and all orders made by that user."""
        pass

    def AddInventory(self, vin, info, performance, design, handling, comfort, entertainment, protection, package, price, status=None) -> bool:
        """  Add a new car to the inventory if it doesn't already exist."""
        pass
    
    def RemoveInventory(self, car) -> bool:
        """ checks if car exists, if it does, checks the status of the car, if it is ordered then it also removes the order
        then proceeds by removing the car entirely from the system"""
        pass

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

main.py
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from PigeonBox.interface import *
from PigeonBox.session import Auth
from PigeonBox.bcolors import *

''' Command line interface '''
def displayData(data):
    """Display an array of data along with their index."""
    pass

def StallUntilUserInput():
    """ Stalls the program and waits for the user to press Enter to continue execution."""
    pass

def isEmpty(arr):
    """Checks if an array is empty and displays a warning message if it is."""
    pass

def validatePassword():
    """Function to validate a new password entered by the user, with confirmation."""
    pass

''' User account details'''
def ChangePasswordMenu():
    """A function to change the password of a user through an interface."""
    pass

def validateUsername():
    """Validates user input for a new username and checks if it is already taken or the same as the old username."""
    pass

def ChangeUsernameMenu():
    """Changes the username for a user by taking input from the user."""
    pass

''' Checkers and validators '''
def ConfirmSelection(response = {"y", "yes", "n", "no"}, msg="") -> bool:
    """A function to confirm a user's selection through a prompt, returning a boolean value."""
    pass

def ValidateUserInput(action="action", isNum=False, isEmail=False):
    """Validates user input based on certain conditions like being a number or an email address."""
    pass

''' General helper functions '''
def getAction(validSet={"1", "2", "3"}, msg="Enter action:"):
    """
    A function to get user input for a valid action from a set of options.
    """
    pass

def PickIndex(arr):
    """
    Displays an array of elements and prompts the user to pick an index to select an element.
    Will display elements in array and ask user to pick one, will return the index of the element picked
    Useful for when choosing an element to view or remove. Like when removing a car, this will point to its index in the list
    and the user will be able to remove it by index.
    """
    pass

def SeparateInputToList(inpt):
    """
    Takes in a string and returns an array of the string separated by commas
    """
    pass

def GetObject(objectList):
    """
    Selects and returns an object once user chooses it from a list (calls on PickIndex)
    """
    pass

def updateCarStatus(car):
    """
    Update the status of a car in the inventory.
    """
    pass

''' helper menus'''
def AddEmployee():
    """
    Function to add a new employee with username, password, first name, and last name
    and grant admin privileges if desired.
    """
    pass

def RemoveEmployeeMenu():
    """
    'Menu' for removing an employee, will ask user to pick from a list of employees
    and then confirm the selection. If the user confirms, the employee will be removed.
    """
    pass

def displayStatusOptions():
    """
    Displays the available status options for an inventory and prompts the user to choose one.
    """
    pass

def CarSearch():
    """
    A function that searches for a car in the inventory based on the model, make, and year entered by the user.
    """
    pass

def filterByMenu():
    """
    Displays a menu to filter cars by their status and displays the filtered data.
    """
    pass

def modifyInventoryMenu():
    """
    Allows an administrator to add or remove a car from the inventory.
    """
    pass


''' Customer Management helper functions'''
def AddCustomer():
    """
    Adds a new customer with their personal and credit card details to the system.
    """
    pass

def DeleteCustomerMenu(customerToDelete):
    """Deletes a customer from the system."""
    pass

def Login():
    """ This function takes care of the login page,
      it will ask for username and password and will return the user object if the user is authenticated"""
    pass

def modifyCarMenu(car):
    """Modifies car status, price, mileage, and warranty plans."""
    pass

def SearchCarMenu(car=None):
    """Function to handle searching for cars in the inventory and providing actions for the search result."""
    pass

def InventoryMenu():
    """
    Display an inventory menu with options to view car details, search, filter, make customer orders, and modify inventory (admin-only).
    """
    pass

def AddCar():
    """
    Will get user input for a new car and add it to the inventory
    """
    pass

def RemoveCar():
    """Function to remove a car from the inventory."""
    pass

def addOrderMenu(carToOrder, customers):
    """ Allows the user to add a new order to the system by selecting a car and customer."""
    pass

def OrderMenu():
    """Prints the order menu and provides options to add, remove, or view orders."""
    pass

def ManageEmployeesMenu():
    """
    Displays employee management menu and provides options to view, add or remove employees.
    """
    pass

def validateCreditCard():
    """
    Validates a credit card number.
    """
    pass

def modifyCustomerDetails(customer=None):
    """
    Modify details of a customer.
    """
    pass

def ManageCustomersMenu():
    """
    Displays a menu for managing customers and prompts for actions to perform.
    """
    pass

def CarSalesMenu():
    """
    Displays a menu for car sales and prompts for actions to perform.
    """
    pass

def AccountSettingsMenu():
    """
    Displays the menu for changing account details.
    """
    pass

def menu():
    """
    Main menu that the users will first interact with. Calls on other menus.
    """
    pass


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

status.py
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
from enum import Enum

class Status(Enum):
    """ Enum class that defines the status of a car, and two functions that convert 
        between the string representation of a status and its corresponding enum value."""
    
    AVAILABLE = 1   # When a car is added to the inventory and is available for purchase
    ORDERED = 2     # When a customer orders a car and it is not yet delivered
    BACKORDER = 3   # when car is out of stock -- could be a customer ordered, then got removed, set car to backorder status rather than available
    DELIVERED = 4   # when a car is delivered to a customer #TODO: add this functionality in the car sales menu

STATUS_DICT = { "available": Status.AVAILABLE,
                "ordered": Status.ORDERED,
                "backorder": Status.BACKORDER,
                "delivered": Status.DELIVERED}

def strToStatus(status: str):
    """
    Convert a string representation of car status to its corresponding enum value.
    
    Args:
    status (str): A string representing the status of a car
    
    Returns:
    Status: The corresponding Status enum value
    """
    pass

def StatusToStr(status: Status):
    """
    Converts a Status enum value to its string representation.
    
    Args:
    status (Status): The Status enum value
    
    Returns:
    str: The string representation of the given Status enum value
    """
    pass